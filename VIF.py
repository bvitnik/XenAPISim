#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright: (c) 2018, Bojan Vitnik <bvitnik@mainstream.rs>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import print_function

import uuid
from datetime import datetime

from xenapi_object import xenapi_object
from xenapi_exception import xenapi_exception


class VIF(xenapi_object):
    """XenAPI VIF class.

    Attributes:
    """

    def __init__(self, xenapi):
        """Inits VIF class.

        Args:
        """
        super(VIF, self).__init__(xenapi)

        self.field_def.update({
            "MAC": "",
            "MAC_autogenerated": False,
            "MTU": "0",
            "VM": "OpaqueRef:NULL",
            "allowed_operations": [],
            "current_operations": {},
            "currently_attached": False,
            "device": "",
            "ipv4_addresses": [],
            "ipv4_allowed": [],
            "ipv4_configuration_mode": "None",
            "ipv4_gateway": "",
            "ipv6_addresses": [],
            "ipv6_allowed": [],
            "ipv6_configuration_mode": "None",
            "ipv6_gateway": "",
            "locking_mode": "network_default",
            "metrics": "OpaqueRef:NULL",
            "network": "OpaqueRef:NULL",
            "qos_algorithm_params": {},
            "qos_algorithm_type": "",
            "qos_supported_algorithms": [],
            "runtime_properties": {},
            "status_code": "0",
            "status_detail": "",
        })

        self.rw_fields.extend([
            "ipv4_allowed",
            "ipv6_allowed",
            "locking_mode",
            "qos_algorithm_params",
            "qos_algorithm_type",
        ])

        self.list_fields.extend([
            "ipv4_allowed",
            "ipv6_allowed",
        ])

        self.map_fields.extend([
            "qos_algorithm_params",
        ])

        VIF_new = {
            "MAC": "aa:bb:cc:dd:ee:ff",
            "MAC_autogenerated": True,
            "MTU": "1500",
            "VM": "OpaqueRef:NULL",
            "allowed_operations": [
                "attach",
                "plug",
                "unplug",
            ],
            "current_operations": {},
            "currently_attached": True,
            "device": "0",
            "ipv4_addresses": [],
            "ipv4_allowed": [],
            "ipv4_configuration_mode": "None",
            "ipv4_gateway": "",
            "ipv6_addresses": [],
            "ipv6_allowed": [],
            "ipv6_configuration_mode": "None",
            "ipv6_gateway": "",
            "locking_mode": "network_default",
            "metrics": "OpaqueRef:NULL",
            "network": "OpaqueRef:NULL",
            "other_config": {},
            "qos_algorithm_params": {},
            "qos_algorithm_type": "",
            "qos_supported_algorithms": [],
            "runtime_properties": {},
            "status_code": "0",
            "status_detail": "",
            "uuid": str(uuid.uuid4()),
        }

        VIF_ref = "OpaqueRef:%s" % str(uuid.uuid4())

        self.objs[VIF_ref] = VIF_new

    def configure_ipv4(self, VIF_ref, mode, address, gateway):
        self._check_param_type(VIF_ref, 'ref')
        self._check_param_type(mode, 'string', 'mode')
        self._check_param_type(address, 'string', 'address')
        self._check_param_type(gateway, 'string', 'gateway')

        self._check_obj_ref(VIF_ref)

        self.objs[VIF_ref]['ipv4_configuration_mode'] = mode
        self.objs[VIF_ref]['ipv4_addresses'][0] = address
        self.objs[VIF_ref]['ipv4_gateway'] = gateway

    def configure_ipv6(self, VIF_ref, mode, address, gateway):
        self._check_param_type(VIF_ref, 'ref')
        self._check_param_type(mode, 'string', 'mode')
        self._check_param_type(address, 'string', 'address')
        self._check_param_type(gateway, 'string', 'gateway')

        self._check_obj_ref(VIF_ref)

        self.objs[VIF_ref]['ipv6_configuration_mode'] = mode
        self.objs[VIF_ref]['ipv6_addresses'][0] = address
        self.objs[VIF_ref]['ipv6_gateway'] = gateway

    def create(self, args):
        self._check_param_type(args, 'struct')

        VIF_uuid = str(uuid.uuid4())

        VIF_new = {
            "MAC": args.get("MAC", ""),
            "MAC_autogenerated": True,
            "MTU": args.get("MTU", "0"),
            "VM": args.get("VM", ""),
            "allowed_operations": [
                "attach",
                "plug",
                "unplug",
            ],
            "current_operations": {},
            "currently_attached": True,
            "device": args.get("device", ""),
            "ipv4_addresses": [],
            "ipv4_allowed": args.get("ipv4_allowed", []),
            "ipv4_configuration_mode": "None",
            "ipv4_gateway": "",
            "ipv6_addresses": [],
            "ipv6_allowed": args.get("ipv6_allowed", []),
            "ipv6_configuration_mode": "None",
            "ipv6_gateway": "",
            "locking_mode": args.get("locking_mode", ""),
            "metrics": "OpaqueRef:NULL",
            "network": args.get("network", ""),
            "other_config": args.get("other_config", {}),
            "qos_algorithm_params": args.get("qos_algorithm_params", {}),
            "qos_algorithm_type": args.get("qos_algorithm_type", ""),
            "qos_supported_algorithms": [],
            "runtime_properties": {},
            "status_code": "0",
            "status_detail": "",
            "uuid": str(uuid.uuid4()),
        }

        self._check_param_type(VIF_new['MAC'], 'string', 'MAC')
        self._check_param_type(VIF_new['MTU'], 'int', 'MTU')
        # self.xenapi.VM._check_param_type(VIF_new['VM'], 'ref')
        self._check_param_type(VIF_new['device'], 'string', 'device')
        self._check_param_type(VIF_new['ipv4_allowed'], 'array', 'ipv4_allowed')
        self._check_param_type(VIF_new['ipv6_allowed'], 'array', 'ipv6_allowed')
        self._check_param_type(VIF_new['locking_mode'], 'string', 'locking_mode')
        self.xenapi.network._check_param_type(VIF_new['network'], 'ref')
        self._check_param_type(VIF_new['other_config'], 'struct', 'other_config')
        self._check_param_type(VIF_new['qos_algorithm_params'], 'struct', 'qos_algorithm_params')
        self._check_param_type(VIF_new['qos_algorithm_type'], 'string', 'qos_algorithm_type')

        for field in ["device", "network", "VM", "MAC", "MTU", "other_config", "qos_algorithm_type", "qos_algorithm_params"]:
            if not field in args:
                raise xenapi_exception(['FIELD_MISSING', field])

        VIF_ref = "OpaqueRef:%s" % str(uuid.uuid4())

        self.objs[VIF_ref] = VIF_new

        return VIF_ref

    def destroy(self, VIF_ref):
        self._check_param_type(VIF_ref, 'ref')
        self._check_obj_ref(VIF_ref)

        del self.objs[VIF_ref]

    def move(self, VIF_ref, network_ref):
        self._check_param_type(VIF_ref, 'ref')
        self.xenapi.network._check_param_type(network_ref, 'ref')

        self._check_obj_ref(VIF_ref)
        self.xenapi.network._check_obj_ref(network_ref)

        self.objs[VIF_ref]['network'] = network_ref
        self.objs[VIF_ref]['MTU'] = self.xenapi.network.objs[network_ref]['MTU']

    def plug(self, VIF_ref):
        self._check_param_type(VIF_ref, 'ref')
        self._check_obj_ref(VIF_ref)

        # Do nothing for now.

    def unplug(self, VIF_ref):
        self._check_param_type(VIF_ref, 'ref')
        self._check_obj_ref(VIF_ref)

        # Do nothing for now.

    def unplug_force(self, VIF_ref):
        self._check_param_type(VIF_ref, 'ref')
        self._check_obj_ref(VIF_ref)

        # Do nothing for now.
